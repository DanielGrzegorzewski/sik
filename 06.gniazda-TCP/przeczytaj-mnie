                             Gniazda TCP
                             ===========

Autor: Krzysztof Rządca
Modyfikacja: Maciej Zielenkiewicz, Adam Witkowski


1 Wprowadzenie
===============

  Podobnie jak w przypadku UDP, do komunikacji po TCP także używamy gniazd.
  Serwer otwiera gniazdo w trybie nasłuchu. Serwer musi wybrać port (oraz
  opcjonalnie adres interfejsu sieciowego, jeżeli chce przyjmować tylko
  połączenia kierowane na adres tego interfejsu). Każdego portu może
  nasłuchiwać maksymalnie jeden proces serwera (lub jeden na interfejs, jeżeli
  podamy adresy interfejsów – system operacyjny na podstawie przychodzącego
  pakietu musi móc jednoznacznie określić, który program powinien go
  obsłużyć). Na przykład serwer HTTP zwykle używa portu 80 lub 8080, serwer
  telnet – 22, a serwer daytime – 13.  Standardowe przypisanie portów do
  serwerów (well-known ports) znajdziesz w /etc/services.

  Klient najpierw nawiązuje połączenie z wybranym serwerem (podając adres IP i
  numer portu), a następnie z gniazda korzysta podobnie jak z otwartego pliku.

  Dokładniejszy opis sposobu stosowania gniazd można znaleźć w man 7 socket.

2 Serwer echo
==============

  Napiszemy własny serwer działający po TCP. Serwer będzie czytał otrzymany od
  klienta ciąg znaków, a następnie go odsyłał.

2.1 Przepływ sterowania - sekwencja wywołań funkcji API
--------------------------------------------------------
  socket -> bind -> listen -> accept -> (read/write) -> [ close ]

2.2 socket: stwórz gniazdo komunikacji sieciowej
-------------------------------------------------

  int socket(int domain, int type, int protocol);

  Analogicznie do UDP (domain to AF_INET, type SOCK_STREAM).

2.3 bind: dowiąż gniazdo do lokalnego adresu
---------------------------------------------

  int bind(int sockfd, const struct sockaddr *addr, socklen_t addrlen);

  Analogicznie jak przy UDP.

  Przypomnienie:
  Do konwersji liczb między kolejnością hosta a sieciową służą funkcje:

    short htons(short s); /* host to network short */
    short ntohs(short s); /* network to host short */
    long  htonl(long l);  /* host to network long */
    long  ntohl(long l);  /* network to host long */

2.4 listen: przełącz gniazdo w tryb nasłuchu
---------------------------------------------

  int listen(int sockfd, int backlog);

* sockfd: deskryptor gniazda
* backlog: maksymalna długość kolejki żądań połączeń

2.5 accept
-----------

  int accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen);

Funkcja accept() pobiera pierwsze z oczekujących żądań połączenia z gniazda
sockfd i tworzy dla niego nowe, połączone gniazdo. Identyfikator tego gniazda
zwracany jest jako rezultat funkcji. Funkcja accept() blokuje się, jeśli nie ma
żadnego żądania połączenia.

* addr: wskaźnik do struktury, w której zostanie umieszczony adres połączonego
  klienta

* addrlen: wskaźnik do zmiennej, która zawiera długość struktury opisującej
  adres połączonego klienta (uwaga: ten parametr musi być poprawnie
  zainicjowany)

2.6 Obsługa klienta: read / write
----------------------------------

W przykładzie obsługa klienta odbywa się w głównym (jedynym) wątku
programu. Używamy standardowych funkcji czytania z deskryptora i pisania do
deskryptora:


  int read(int fd, void* buf, size_t count);
  int write(int fd, const void* buf, size_t count);

Nie kontrolujesz danych otrzymywanych od drugiej strony komunikacji. Serwer nie
może założyć, że dane od klienta są zakończone zerem. Przeanalizuj, jak serwer
broni się przed tym problemem.

Funkcja read() nie musi zwrócić od razu całego komunikatu wysłanego przez
klienta. Ponieważ TCP dzieli strumień przesyłanych bajtów na segmenty, które są
buforowane, komunikaty klienta mogą być dowolnie cięte i łączone podczas
transmisji.

2.7 Zadania
------------

1. Uruchom serwer (./echo-server).

2. Znajdź gniazdo serwera w wykazie otwartych gniazd (netstat -ltn).

3. Podłącz się do serwera programem telnet lub nc.

4. Znajdź połączenie w wykazie istniejących połączeń (netstat -tn).

5. Podczas gdy jedna sesja jest otwarta, spróbuj na innej konsoli
połączyć się z serwerem jeszcze raz.

6. Podłącz się do serwera koleżanki lub kolegi.

7. Zmień kod serwera tak, by numer portu wczytywany był jako argument programu.

3 Klient echo
==============

3.1 Przepływ sterowania - sekwencja wywołań funkcji API
--------------------------------------------------------
socket -> connect -> (read/write) -> [ close ]

3.2 connect: połączenie się ze zdalnym adresem
-----------------------------------------------

int connect(int sockfd, const struct sockaddr *addr, socklen_t addrlen);

* sockfd: deskryptor gniazda
* addr: wskaźnik do struktury opisującej adres, z którym będziemy się łączyć
  (pamiętaj o sieciowej kolejności bajtów)
* addrlen: długość struktury opisującej adres

3.3 read/write: czytanie i pisanie
-----------------------------------

Zwróć uwagę, że klient nie wysyła zera, które zwykle kończy łańcuchy znaków w C.

Nie kontrolujesz danych otrzymywanych od drugiej strony komunikacji. Klient nie
może założyć, że dane od serwera są zakończone zerem. Przeanalizuj, jak klient
broni się przed tym problemem.

3.4 close: zamknięcie połączenia
---------------------------------

int close(int fd);

Połączenie może zostać zamknięte przez klienta lub przez serwer. Gdy jedna ze
stron zamyka połączenie, read() wykonany przez drugą stronę zwraca 0, natomiast
próba zapisu powoduje dostarczenie do procesu sygnału SIGPIPE (i kończy się
błędem EPIPE).

3.5 getaddrinfo: tłumaczenie adresów na struct sockaddr
--------------------------------------------------------

int getaddrinfo(const char *node, const char *service,
                const struct addrinfo *hints,
                struct addrinfo **res);

Opisana w scenariuszu o UDP.

3.6 Zadania
------------

1. Uruchom klienta i połącz się ze swoim lokalnym serwerem.

2. Połącz się z serwerem sąsiada.

3. Uruchom wireshark. Następnie uruchom klienta. Zaobserwuj pakiety wysyłane
przez klienta i odsyłane przez serwer.

4. Po wywołaniu connect() zawieś wykonanie klienta (np. przez
sleep(10)). Zaobserwuj, czy connect() powoduje wysłanie jakiś pakietów, czy też
wysyłane one są dopiero po pierwszym write().

5. W podobny sposób opóźnij wykonanie close(). Zidentyfikuj pakiety wysyłane
przez klienta i przez serwer w rezultacie wykonania close().

6. Zmodyfikuj serwer tak, by każdy ciąg znaków odsyłany do klienta poprzedzał
twoimi inicjałami.

4 Klient i serwer 'nums'
========================

  W plikach nums-server.c i nums-client.c znajduje się inna para serwer-klient
  działająca po TCP. Klient dla każdej wczytanej z wejścia liczby wysyła do
  serwera parę: numer kolejny (liczba 16-bitowa) oraz wczytaną liczbę
  (32-bitową). Serwer wypisuje otrzymane dane.

4.1 Ciekawe elementy
---------------------

  Programy 'nums' korzystają z tych samych funkcji systemowych co programy
  'echo'. Proszę jednak zwrócić uwagę na następujące elementy:

  * Powinniśmy precyzyjnie podawać ilubajtowe liczby wysyłamy i odbieramy, na
    przykład korzystając z typów uint32_t. Długość liczby typu int nie jest
    ustalona i może być zależeć od systemu.

  * Jeśli chcemy wysyłać lub odbierać całą strukturę (a nie pojedyncze dane typów
    prostych), powinniśmy ją zadeklarować z atrybutem __packed__. Bez tego
    kompilator pomiędzy polami struktury może wstawić dodatkowe nieużywane
    bajty (aby przyspieszyć działanie programu).

  * Przed wysłaniem zamieniamy kolejność bajtów w liczbie na sieciową (funkcje
    htons, htonl).

  * Możliwe jest, że wywołanie read nie zwróci całej wysłanej struktury,
    a jedynie jej część. Konieczne jest obsłużenie tego przypadku.

4.2 Zadania
------------

1. Uruchom serwer i połącz się klientem ze swoim lokalnym serwerem.

2. Połącz się z serwerem sąsiada.

3. Sprawdź, jaka jest długość liczby int na twoim komputerze i na 'students'.

4. Sprawdź, jaka będzie długość struktury DataStructure, jeśli
   zadeklarujemy ją bez atrybutu __packed__.

5. Sprawdź, że (nawet w przypadku wysyłania pojedynczych sześciobajtowych
   struktur, jak w przykładowym kliencie) read rzeczywiście odczytuje czasem
   mniej bajtów niż długość struktury (spróbuj podać do klienta dużo danych na
   raz, pracując przez sieć).
